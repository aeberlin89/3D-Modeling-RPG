//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input/Input_One.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Input_One : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Input_One()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Input_One"",
    ""maps"": [
        {
            ""name"": ""Player_Land"",
            ""id"": ""8ece6565-468d-458c-8da7-bdd786dddf6b"",
            ""actions"": [
                {
                    ""name"": ""MovePlayer"",
                    ""type"": ""Button"",
                    ""id"": ""f61f5a4e-7735-40b1-836e-fb7f3ec76d0b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""68c5acf8-0e3c-45ca-b7ef-ea149a718124"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d06dce3c-3723-4d78-b941-86396bb15cd5"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePlayer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4495e8fa-a3bb-4426-9e11-4bba4e37acea"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player_Land
        m_Player_Land = asset.FindActionMap("Player_Land", throwIfNotFound: true);
        m_Player_Land_MovePlayer = m_Player_Land.FindAction("MovePlayer", throwIfNotFound: true);
        m_Player_Land_Interact = m_Player_Land.FindAction("Interact", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player_Land
    private readonly InputActionMap m_Player_Land;
    private IPlayer_LandActions m_Player_LandActionsCallbackInterface;
    private readonly InputAction m_Player_Land_MovePlayer;
    private readonly InputAction m_Player_Land_Interact;
    public struct Player_LandActions
    {
        private @Input_One m_Wrapper;
        public Player_LandActions(@Input_One wrapper) { m_Wrapper = wrapper; }
        public InputAction @MovePlayer => m_Wrapper.m_Player_Land_MovePlayer;
        public InputAction @Interact => m_Wrapper.m_Player_Land_Interact;
        public InputActionMap Get() { return m_Wrapper.m_Player_Land; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player_LandActions set) { return set.Get(); }
        public void SetCallbacks(IPlayer_LandActions instance)
        {
            if (m_Wrapper.m_Player_LandActionsCallbackInterface != null)
            {
                @MovePlayer.started -= m_Wrapper.m_Player_LandActionsCallbackInterface.OnMovePlayer;
                @MovePlayer.performed -= m_Wrapper.m_Player_LandActionsCallbackInterface.OnMovePlayer;
                @MovePlayer.canceled -= m_Wrapper.m_Player_LandActionsCallbackInterface.OnMovePlayer;
                @Interact.started -= m_Wrapper.m_Player_LandActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_Player_LandActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_Player_LandActionsCallbackInterface.OnInteract;
            }
            m_Wrapper.m_Player_LandActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MovePlayer.started += instance.OnMovePlayer;
                @MovePlayer.performed += instance.OnMovePlayer;
                @MovePlayer.canceled += instance.OnMovePlayer;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
            }
        }
    }
    public Player_LandActions @Player_Land => new Player_LandActions(this);
    public interface IPlayer_LandActions
    {
        void OnMovePlayer(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
    }
}
